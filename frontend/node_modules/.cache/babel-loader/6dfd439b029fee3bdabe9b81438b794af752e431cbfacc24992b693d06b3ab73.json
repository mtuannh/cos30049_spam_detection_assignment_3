{"ast":null,"code":"var _jsxFileName = \"D:\\\\studydocuments\\\\2nd year\\\\Sem 2\\\\COS30049\\\\cos30049_spam_detection_assignment_3\\\\frontend\\\\src\\\\components\\\\BatchPredict.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { api } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BatchPredict() {\n  _s();\n  const [raw, setRaw] = useState(\"\");\n  const [rows, setRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const toList = txt => txt.split(\"\\n\").map(s => s.trim()).filter(s => s.length > 0).slice(0, 200);\n  const runBatch = async () => {\n    setError(\"\");\n    const items = toList(raw);\n    if (items.length === 0) {\n      setError(\"Please enter at least one line.\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const r = await api.batchPredict(items);\n      const results = r.results || [];\n      setRows(items.map((t, i) => ({\n        text: t,\n        ...(results[i] || {})\n      })));\n    } catch (err) {\n      setError(err.message || \"Batch failed\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Batch Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Enter one message per line (max 200 lines).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: \"8\",\n      value: raw,\n      onChange: e => setRaw(e.target.value),\n      placeholder: \"Line 1\\nLine 2\\n\\u2026\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: runBatch,\n        disabled: loading,\n        children: loading ? \"Predicting…\" : \"Run batch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"secondary\",\n        onClick: () => {\n          setRaw(\"\");\n          setRows([]);\n          setError(\"\");\n        },\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 15\n    }, this), rows.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-wrap\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 27\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Label\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 40\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Spam Prob.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 54\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: rows.map((r, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: i + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"mono\",\n              children: r.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: r.label ? \"SPAM\" : \"HAM\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [(r.probability * 100).toFixed(2), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 1\n  }, this);\n}\n_s(BatchPredict, \"K0FjI3lZtAnwY9xoB0xn6tQCY9I=\");\n_c = BatchPredict;\nvar _c;\n$RefreshReg$(_c, \"BatchPredict\");","map":{"version":3,"names":["React","useState","api","jsxDEV","_jsxDEV","BatchPredict","_s","raw","setRaw","rows","setRows","loading","setLoading","error","setError","toList","txt","split","map","s","trim","filter","length","slice","runBatch","items","r","batchPredict","results","t","i","text","err","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","disabled","label","probability","toFixed","_c","$RefreshReg$"],"sources":["D:/studydocuments/2nd year/Sem 2/COS30049/cos30049_spam_detection_assignment_3/frontend/src/components/BatchPredict.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { api } from \"../services/api\";\r\n\r\nexport default function BatchPredict() {\r\nconst [raw, setRaw] = useState(\"\");\r\nconst [rows, setRows] = useState([]);\r\nconst [loading, setLoading] = useState(false);\r\nconst [error, setError] = useState(\"\");\r\n\r\nconst toList = (txt) =>\r\ntxt.split(\"\\n\").map((s) => s.trim()).filter((s) => s.length > 0).slice(0, 200);\r\n\r\nconst runBatch = async () => {\r\nsetError(\"\");\r\nconst items = toList(raw);\r\nif (items.length === 0) { setError(\"Please enter at least one line.\"); return; }\r\nsetLoading(true);\r\ntry {\r\n    const r = await api.batchPredict(items);\r\n    const results = r.results || [];\r\n    setRows(items.map((t, i) => ({ text: t, ...(results[i] || {}) })));\r\n} catch (err) {\r\n    setError(err.message || \"Batch failed\");\r\n} finally {\r\n    setLoading(false);\r\n}\r\n};\r\n\r\nreturn (\r\n<section className=\"card\">\r\n    <h2>Batch Prediction</h2>\r\n    <p>Enter one message per line (max 200 lines).</p>\r\n    <textarea rows=\"8\" value={raw} onChange={(e) => setRaw(e.target.value)} placeholder=\"Line 1&#10;Line 2&#10;…\" />\r\n    <div className=\"actions\">\r\n    <button onClick={runBatch} disabled={loading}>{loading ? \"Predicting…\" : \"Run batch\"}</button>\r\n    <button className=\"secondary\" onClick={() => { setRaw(\"\"); setRows([]); setError(\"\"); }}>Clear</button>\r\n    </div>\r\n    {error && <div className=\"error\">{error}</div>}\r\n\r\n    {rows.length > 0 && (\r\n    <div className=\"table-wrap\">\r\n        <table>\r\n        <thead>\r\n            <tr><th>#</th><th>Text</th><th>Label</th><th>Spam Prob.</th></tr>\r\n        </thead>\r\n        <tbody>\r\n            {rows.map((r, i) => (\r\n            <tr key={i}>\r\n                <td>{i + 1}</td>\r\n                <td className=\"mono\">{r.text}</td>\r\n                <td>{r.label ? \"SPAM\" : \"HAM\"}</td>\r\n                <td>{(r.probability * 100).toFixed(2)}%</td>\r\n            </tr>\r\n            ))}\r\n        </tbody>\r\n        </table>\r\n    </div>\r\n    )}\r\n</section>\r\n);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}