{"ast":null,"code":"const BASE = \"http://localhost:8000\";\nasync function getJSON(path) {\n  const res = await fetch(`${BASE}${path}`);\n  if (!res.ok) throw new Error(await res.text());\n  return res.json();\n}\nasync function postJSON(path, body) {\n  const res = await fetch(`${BASE}${path}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  if (!res.ok) throw new Error(await res.text());\n  return res.json();\n}\nexport const api = {\n  health: () => getJSON(\"/health\"),\n  predict: text => postJSON(\"/predict\", {\n    text\n  }),\n  batchPredict: texts => postJSON(\"/batch_predict\", {\n    texts\n  }),\n  metrics: () => getJSON(\"/metrics\"),\n  charts: () => getJSON(\"/charts-data\"),\n  prCurve: () => getJSON(\"/pr-curve\"),\n  calibration: () => getJSON(\"/calibration\"),\n  elbow: () => getJSON(\"/kmeans/elbow\"),\n  kmeansScores: () => getJSON(\"/kmeans/scores\")\n};","map":{"version":3,"names":["BASE","getJSON","path","res","fetch","ok","Error","text","json","postJSON","body","method","headers","JSON","stringify","api","health","predict","batchPredict","texts","metrics","charts","prCurve","calibration","elbow","kmeansScores"],"sources":["D:/studydocuments/2nd year/Sem 2/COS30049/cos30049_spam_detection_assignment_3/frontend/src/services/api.js"],"sourcesContent":["const BASE = \"http://localhost:8000\";\r\n\r\nasync function getJSON(path) {\r\n    const res = await fetch(`${BASE}${path}`);\r\n    if (!res.ok) throw new Error(await res.text());\r\n    return res.json();\r\n}\r\n\r\nasync function postJSON(path, body) {\r\n    const res = await fetch(`${BASE}${path}`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(body),\r\n    });\r\n    if (!res.ok) throw new Error(await res.text());\r\n    return res.json();\r\n}\r\n\r\nexport const api = {\r\n    health: () => getJSON(\"/health\"),\r\n    predict: (text) => postJSON(\"/predict\", { text }),\r\n    batchPredict: (texts) => postJSON(\"/batch_predict\", { texts }),\r\n    metrics: () => getJSON(\"/metrics\"),\r\n    charts: () => getJSON(\"/charts-data\"),\r\n    prCurve: () => getJSON(\"/pr-curve\"),\r\n    calibration: () => getJSON(\"/calibration\"),\r\n    elbow: () => getJSON(\"/kmeans/elbow\"),\r\n    kmeansScores: () => getJSON(\"/kmeans/scores\"),\r\n};\r\n"],"mappings":"AAAA,MAAMA,IAAI,GAAG,uBAAuB;AAEpC,eAAeC,OAAOA,CAACC,IAAI,EAAE;EACzB,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGJ,IAAI,GAAGE,IAAI,EAAE,CAAC;EACzC,IAAI,CAACC,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC,CAAC;EAC9C,OAAOJ,GAAG,CAACK,IAAI,CAAC,CAAC;AACrB;AAEA,eAAeC,QAAQA,CAACP,IAAI,EAAEQ,IAAI,EAAE;EAChC,MAAMP,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGJ,IAAI,GAAGE,IAAI,EAAE,EAAE;IAC1CS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CF,IAAI,EAAEG,IAAI,CAACC,SAAS,CAACJ,IAAI;EACzB,CAAC,CAAC;EACF,IAAI,CAACP,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC,CAAC;EAC9C,OAAOJ,GAAG,CAACK,IAAI,CAAC,CAAC;AACrB;AAEA,OAAO,MAAMO,GAAG,GAAG;EACfC,MAAM,EAAEA,CAAA,KAAMf,OAAO,CAAC,SAAS,CAAC;EAChCgB,OAAO,EAAGV,IAAI,IAAKE,QAAQ,CAAC,UAAU,EAAE;IAAEF;EAAK,CAAC,CAAC;EACjDW,YAAY,EAAGC,KAAK,IAAKV,QAAQ,CAAC,gBAAgB,EAAE;IAAEU;EAAM,CAAC,CAAC;EAC9DC,OAAO,EAAEA,CAAA,KAAMnB,OAAO,CAAC,UAAU,CAAC;EAClCoB,MAAM,EAAEA,CAAA,KAAMpB,OAAO,CAAC,cAAc,CAAC;EACrCqB,OAAO,EAAEA,CAAA,KAAMrB,OAAO,CAAC,WAAW,CAAC;EACnCsB,WAAW,EAAEA,CAAA,KAAMtB,OAAO,CAAC,cAAc,CAAC;EAC1CuB,KAAK,EAAEA,CAAA,KAAMvB,OAAO,CAAC,eAAe,CAAC;EACrCwB,YAAY,EAAEA,CAAA,KAAMxB,OAAO,CAAC,gBAAgB;AAChD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}